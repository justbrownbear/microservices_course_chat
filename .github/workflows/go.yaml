name: Go

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]

env:
  REGISTRY: "cr.selcloud.ru/docker-registry"
  IMAGE_NAME: "chat"
  CONTAINER_NAME: "chat"

jobs:
  linter:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.53

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          args: --timeout=30m --config=./.golangci.pipeline.yaml --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

  build-test-and-push:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3

        - name: Set up Go
          uses: actions/setup-go@v4
          with:
            go-version: '1.21'
            cache-dependency-path: go.sum

        - name: Build
          run: go build -o ./bin/ -v ./...

        - name: Test
          run: go test -v ./...

        - name: Checkout branch
          uses: actions/checkout@v4

        - name: Login to Docker Registry
          run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

        - name: Build and Push Docker image
          run: |
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            docker buildx create --use
            docker buildx build --no-cache --platform linux/amd64 --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME .

  deploy-image:
    runs-on: ubuntu-latest
    needs: build-test-and-push
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Deploy to Selectel Cloud via SSH action
        uses: masterjanic/docker-compose-ssh-deployment@master
        with:
          ssh_host: ${{ secrets.SERVER_HOST }}
          ssh_user: ${{ secrets.SSH_USERNAME }}
          ssh_private_key: ${{ secrets.SSH_KEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_HOST,POSTGRES_PORT,POSTGRES_DB,GRPC_PROTOCOL,GRPC_HOST,GRPC_PORT


      # - name: Deploy to Selectel Cloud via SSH action
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.SERVER_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     key: ${{ secrets.SSH_KEY }}
      #     envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_HOST,POSTGRES_PORT,POSTGRES_DB,GRPC_PROTOCOL,GRPC_HOST,GRPC_PORT
      #     script: |
      #       # Set up variables
      #       TAG_NAME=$(echo $GITHUB_SHA | head -c7)

      #       # Login into Selectel Registry
      #       docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      #       # Stop running container
      #       # docker stop $CONTAINER_NAME

      #       # Remove old container
      #       # docker rm $CONTAINER_NAME

      #       # Run a new container from a new image
      #       # docker run -d \
      #       #   --name $CONTAINER_NAME \
      #       #   -p ${{ secrets.GRPC_PORT }}:${{ secrets.GRPC_PORT }} \
      #       #   -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
      #       #   -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
      #       #   -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
      #       #   -e POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
      #       #   -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
      #       #   -e GRPC_PROTOCOL=${{ secrets.GRPC_PROTOCOL }} \
      #       #   -e GRPC_HOST=${{ secrets.GRPC_HOST }} \
      #       #   -e GRPC_PORT=${{ secrets.GRPC_PORT }} \
      #       #   -t $REGISTRY/$IMAGE_NAME:$TAG_NAME
      #       docker-compose -f docker-compose.yaml up -d \
      #         -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
      #         -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
      #         -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
      #         -e POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
      #         -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
      #         -e GRPC_PROTOCOL=${{ secrets.GRPC_PROTOCOL }} \
      #         -e GRPC_HOST=${{ secrets.GRPC_HOST }} \
      #         -e GRPC_PORT=${{ secrets.GRPC_PORT }}
