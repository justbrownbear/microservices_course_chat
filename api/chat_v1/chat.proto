syntax = "proto3";

package chat_v1;

import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/justbrownbear/microservices_course_chat/pkg/chat_v1;chat_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Microservice like bigtech chat API"
		version: "1.0.0"
		contact: {
			name: "Kirill Bastrikov"
			email: "380929@gmail.com"
		};
	};

	host: "localhost:8080",
	schemes: HTTP,
	schemes: HTTPS,
	consumes: "application/json",
	produces: "application/json",
  };



service ChatV1 {
	// Создание чата
	rpc CreateChat(CreateChatRequest) returns (CreateChatResponse)
	{
		option (google.api.http) =
		{
			post: "/api/v1/create_chat"
			body: "*"
		};
	};
	// Удаление чата
	rpc DeleteChat(DeleteChatRequest) returns (google.protobuf.Empty)
	{
		option (google.api.http) =
		{
			// Не люблю использовать DELETE, предпочитаю POST везде
			post: "/api/v1/delete_chat"
			body: "*"
		};
	};
	// Отправка сообщения
	rpc SendMessage(SendMessageRequest) returns (google.protobuf.Empty)
	{
		option (google.api.http) =
		{
			post: "/api/v1/send_message"
			body: "*"
		};
	};
}

message CreateChatRequest {
	// ID пользователя
	uint64 user_id = 1 [(validate.rules).uint64 = {gt: 0}];
	// Название чата
	string chat_name = 2 [(validate.rules).string = {min_len: 1, max_len: 50}];
}

message CreateChatResponse {
	// ID чата
	uint64 id = 1;
}

message DeleteChatRequest {
	// ID чата
	uint64 chat_id = 1 [(validate.rules).uint64 = {gt: 0}];
}

message SendMessageRequest {
	// ID пользователя
	uint64 user_id = 1 [(validate.rules).uint64 = {gt: 0}];
	// ID чата
	uint64 chat_id = 2 [(validate.rules).uint64 = {gt: 0}];
	// Сообщение
	string message = 3 [(validate.rules).string = {min_len: 1, max_len: 1024}];
}
