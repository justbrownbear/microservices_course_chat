// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/justbrownbear/microservices_course_chat/internal/api/grpc.GrpcAPI -o grpc_api_minimock.go -n GrpcAPIMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	chat_service "github.com/justbrownbear/microservices_course_chat/internal/service/chat"
	user_service "github.com/justbrownbear/microservices_course_chat/internal/service/user"
)

// GrpcAPIMock implements grpc_api.GrpcAPI
type GrpcAPIMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateChat          func(ctx context.Context, in *chat_service.CreateChatRequest) (u1 uint64, err error)
	inspectFuncCreateChat   func(ctx context.Context, in *chat_service.CreateChatRequest)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mGrpcAPIMockCreateChat

	funcCreateUser          func(ctx context.Context, in *user_service.CreateUserRequest) (u1 uint64, err error)
	inspectFuncCreateUser   func(ctx context.Context, in *user_service.CreateUserRequest)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mGrpcAPIMockCreateUser

	funcDeleteChat          func(ctx context.Context, chatID uint64) (err error)
	inspectFuncDeleteChat   func(ctx context.Context, chatID uint64)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mGrpcAPIMockDeleteChat

	funcDeleteUser          func(ctx context.Context, userID uint64) (err error)
	inspectFuncDeleteUser   func(ctx context.Context, userID uint64)
	afterDeleteUserCounter  uint64
	beforeDeleteUserCounter uint64
	DeleteUserMock          mGrpcAPIMockDeleteUser

	funcSendMessage          func(ctx context.Context, in *chat_service.SendMessageRequest) (err error)
	inspectFuncSendMessage   func(ctx context.Context, in *chat_service.SendMessageRequest)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mGrpcAPIMockSendMessage
}

// NewGrpcAPIMock returns a mock for grpc_api.GrpcAPI
func NewGrpcAPIMock(t minimock.Tester) *GrpcAPIMock {
	m := &GrpcAPIMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateChatMock = mGrpcAPIMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*GrpcAPIMockCreateChatParams{}

	m.CreateUserMock = mGrpcAPIMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*GrpcAPIMockCreateUserParams{}

	m.DeleteChatMock = mGrpcAPIMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*GrpcAPIMockDeleteChatParams{}

	m.DeleteUserMock = mGrpcAPIMockDeleteUser{mock: m}
	m.DeleteUserMock.callArgs = []*GrpcAPIMockDeleteUserParams{}

	m.SendMessageMock = mGrpcAPIMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*GrpcAPIMockSendMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mGrpcAPIMockCreateChat struct {
	optional           bool
	mock               *GrpcAPIMock
	defaultExpectation *GrpcAPIMockCreateChatExpectation
	expectations       []*GrpcAPIMockCreateChatExpectation

	callArgs []*GrpcAPIMockCreateChatParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// GrpcAPIMockCreateChatExpectation specifies expectation struct of the GrpcAPI.CreateChat
type GrpcAPIMockCreateChatExpectation struct {
	mock      *GrpcAPIMock
	params    *GrpcAPIMockCreateChatParams
	paramPtrs *GrpcAPIMockCreateChatParamPtrs
	results   *GrpcAPIMockCreateChatResults
	Counter   uint64
}

// GrpcAPIMockCreateChatParams contains parameters of the GrpcAPI.CreateChat
type GrpcAPIMockCreateChatParams struct {
	ctx context.Context
	in  *chat_service.CreateChatRequest
}

// GrpcAPIMockCreateChatParamPtrs contains pointers to parameters of the GrpcAPI.CreateChat
type GrpcAPIMockCreateChatParamPtrs struct {
	ctx *context.Context
	in  **chat_service.CreateChatRequest
}

// GrpcAPIMockCreateChatResults contains results of the GrpcAPI.CreateChat
type GrpcAPIMockCreateChatResults struct {
	u1  uint64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateChat *mGrpcAPIMockCreateChat) Optional() *mGrpcAPIMockCreateChat {
	mmCreateChat.optional = true
	return mmCreateChat
}

// Expect sets up expected params for GrpcAPI.CreateChat
func (mmCreateChat *mGrpcAPIMockCreateChat) Expect(ctx context.Context, in *chat_service.CreateChatRequest) *mGrpcAPIMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("GrpcAPIMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &GrpcAPIMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.paramPtrs != nil {
		mmCreateChat.mock.t.Fatalf("GrpcAPIMock.CreateChat mock is already set by ExpectParams functions")
	}

	mmCreateChat.defaultExpectation.params = &GrpcAPIMockCreateChatParams{ctx, in}
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// ExpectCtxParam1 sets up expected param ctx for GrpcAPI.CreateChat
func (mmCreateChat *mGrpcAPIMockCreateChat) ExpectCtxParam1(ctx context.Context) *mGrpcAPIMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("GrpcAPIMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &GrpcAPIMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("GrpcAPIMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &GrpcAPIMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateChat
}

// ExpectInParam2 sets up expected param in for GrpcAPI.CreateChat
func (mmCreateChat *mGrpcAPIMockCreateChat) ExpectInParam2(in *chat_service.CreateChatRequest) *mGrpcAPIMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("GrpcAPIMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &GrpcAPIMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("GrpcAPIMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &GrpcAPIMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.in = &in

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the GrpcAPI.CreateChat
func (mmCreateChat *mGrpcAPIMockCreateChat) Inspect(f func(ctx context.Context, in *chat_service.CreateChatRequest)) *mGrpcAPIMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for GrpcAPIMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by GrpcAPI.CreateChat
func (mmCreateChat *mGrpcAPIMockCreateChat) Return(u1 uint64, err error) *GrpcAPIMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("GrpcAPIMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &GrpcAPIMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &GrpcAPIMockCreateChatResults{u1, err}
	return mmCreateChat.mock
}

// Set uses given function f to mock the GrpcAPI.CreateChat method
func (mmCreateChat *mGrpcAPIMockCreateChat) Set(f func(ctx context.Context, in *chat_service.CreateChatRequest) (u1 uint64, err error)) *GrpcAPIMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the GrpcAPI.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the GrpcAPI.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	return mmCreateChat.mock
}

// When sets expectation for the GrpcAPI.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mGrpcAPIMockCreateChat) When(ctx context.Context, in *chat_service.CreateChatRequest) *GrpcAPIMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("GrpcAPIMock.CreateChat mock is already set by Set")
	}

	expectation := &GrpcAPIMockCreateChatExpectation{
		mock:   mmCreateChat.mock,
		params: &GrpcAPIMockCreateChatParams{ctx, in},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up GrpcAPI.CreateChat return parameters for the expectation previously defined by the When method
func (e *GrpcAPIMockCreateChatExpectation) Then(u1 uint64, err error) *GrpcAPIMock {
	e.results = &GrpcAPIMockCreateChatResults{u1, err}
	return e.mock
}

// Times sets number of times GrpcAPI.CreateChat should be invoked
func (mmCreateChat *mGrpcAPIMockCreateChat) Times(n uint64) *mGrpcAPIMockCreateChat {
	if n == 0 {
		mmCreateChat.mock.t.Fatalf("Times of GrpcAPIMock.CreateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateChat.expectedInvocations, n)
	return mmCreateChat
}

func (mmCreateChat *mGrpcAPIMockCreateChat) invocationsDone() bool {
	if len(mmCreateChat.expectations) == 0 && mmCreateChat.defaultExpectation == nil && mmCreateChat.mock.funcCreateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateChat.mock.afterCreateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateChat implements grpc_api.GrpcAPI
func (mmCreateChat *GrpcAPIMock) CreateChat(ctx context.Context, in *chat_service.CreateChatRequest) (u1 uint64, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, in)
	}

	mm_params := GrpcAPIMockCreateChatParams{ctx, in}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_want_ptrs := mmCreateChat.CreateChatMock.defaultExpectation.paramPtrs

		mm_got := GrpcAPIMockCreateChatParams{ctx, in}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateChat.t.Errorf("GrpcAPIMock.CreateChat got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmCreateChat.t.Errorf("GrpcAPIMock.CreateChat got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("GrpcAPIMock.CreateChat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the GrpcAPIMock.CreateChat")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, in)
	}
	mmCreateChat.t.Fatalf("Unexpected call to GrpcAPIMock.CreateChat. %v %v", ctx, in)
	return
}

// CreateChatAfterCounter returns a count of finished GrpcAPIMock.CreateChat invocations
func (mmCreateChat *GrpcAPIMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of GrpcAPIMock.CreateChat invocations
func (mmCreateChat *GrpcAPIMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to GrpcAPIMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mGrpcAPIMockCreateChat) Calls() []*GrpcAPIMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*GrpcAPIMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *GrpcAPIMock) MinimockCreateChatDone() bool {
	if m.CreateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateChatMock.invocationsDone()
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *GrpcAPIMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcAPIMock.CreateChat with params: %#v", *e.params)
		}
	}

	afterCreateChatCounter := mm_atomic.LoadUint64(&m.afterCreateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && afterCreateChatCounter < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcAPIMock.CreateChat")
		} else {
			m.t.Errorf("Expected call to GrpcAPIMock.CreateChat with params: %#v", *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && afterCreateChatCounter < 1 {
		m.t.Error("Expected call to GrpcAPIMock.CreateChat")
	}

	if !m.CreateChatMock.invocationsDone() && afterCreateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to GrpcAPIMock.CreateChat but found %d calls",
			mm_atomic.LoadUint64(&m.CreateChatMock.expectedInvocations), afterCreateChatCounter)
	}
}

type mGrpcAPIMockCreateUser struct {
	optional           bool
	mock               *GrpcAPIMock
	defaultExpectation *GrpcAPIMockCreateUserExpectation
	expectations       []*GrpcAPIMockCreateUserExpectation

	callArgs []*GrpcAPIMockCreateUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// GrpcAPIMockCreateUserExpectation specifies expectation struct of the GrpcAPI.CreateUser
type GrpcAPIMockCreateUserExpectation struct {
	mock      *GrpcAPIMock
	params    *GrpcAPIMockCreateUserParams
	paramPtrs *GrpcAPIMockCreateUserParamPtrs
	results   *GrpcAPIMockCreateUserResults
	Counter   uint64
}

// GrpcAPIMockCreateUserParams contains parameters of the GrpcAPI.CreateUser
type GrpcAPIMockCreateUserParams struct {
	ctx context.Context
	in  *user_service.CreateUserRequest
}

// GrpcAPIMockCreateUserParamPtrs contains pointers to parameters of the GrpcAPI.CreateUser
type GrpcAPIMockCreateUserParamPtrs struct {
	ctx *context.Context
	in  **user_service.CreateUserRequest
}

// GrpcAPIMockCreateUserResults contains results of the GrpcAPI.CreateUser
type GrpcAPIMockCreateUserResults struct {
	u1  uint64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateUser *mGrpcAPIMockCreateUser) Optional() *mGrpcAPIMockCreateUser {
	mmCreateUser.optional = true
	return mmCreateUser
}

// Expect sets up expected params for GrpcAPI.CreateUser
func (mmCreateUser *mGrpcAPIMockCreateUser) Expect(ctx context.Context, in *user_service.CreateUserRequest) *mGrpcAPIMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("GrpcAPIMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &GrpcAPIMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.paramPtrs != nil {
		mmCreateUser.mock.t.Fatalf("GrpcAPIMock.CreateUser mock is already set by ExpectParams functions")
	}

	mmCreateUser.defaultExpectation.params = &GrpcAPIMockCreateUserParams{ctx, in}
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// ExpectCtxParam1 sets up expected param ctx for GrpcAPI.CreateUser
func (mmCreateUser *mGrpcAPIMockCreateUser) ExpectCtxParam1(ctx context.Context) *mGrpcAPIMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("GrpcAPIMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &GrpcAPIMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("GrpcAPIMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &GrpcAPIMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateUser
}

// ExpectInParam2 sets up expected param in for GrpcAPI.CreateUser
func (mmCreateUser *mGrpcAPIMockCreateUser) ExpectInParam2(in *user_service.CreateUserRequest) *mGrpcAPIMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("GrpcAPIMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &GrpcAPIMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("GrpcAPIMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &GrpcAPIMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.in = &in

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the GrpcAPI.CreateUser
func (mmCreateUser *mGrpcAPIMockCreateUser) Inspect(f func(ctx context.Context, in *user_service.CreateUserRequest)) *mGrpcAPIMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for GrpcAPIMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by GrpcAPI.CreateUser
func (mmCreateUser *mGrpcAPIMockCreateUser) Return(u1 uint64, err error) *GrpcAPIMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("GrpcAPIMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &GrpcAPIMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &GrpcAPIMockCreateUserResults{u1, err}
	return mmCreateUser.mock
}

// Set uses given function f to mock the GrpcAPI.CreateUser method
func (mmCreateUser *mGrpcAPIMockCreateUser) Set(f func(ctx context.Context, in *user_service.CreateUserRequest) (u1 uint64, err error)) *GrpcAPIMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the GrpcAPI.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the GrpcAPI.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	return mmCreateUser.mock
}

// When sets expectation for the GrpcAPI.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mGrpcAPIMockCreateUser) When(ctx context.Context, in *user_service.CreateUserRequest) *GrpcAPIMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("GrpcAPIMock.CreateUser mock is already set by Set")
	}

	expectation := &GrpcAPIMockCreateUserExpectation{
		mock:   mmCreateUser.mock,
		params: &GrpcAPIMockCreateUserParams{ctx, in},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up GrpcAPI.CreateUser return parameters for the expectation previously defined by the When method
func (e *GrpcAPIMockCreateUserExpectation) Then(u1 uint64, err error) *GrpcAPIMock {
	e.results = &GrpcAPIMockCreateUserResults{u1, err}
	return e.mock
}

// Times sets number of times GrpcAPI.CreateUser should be invoked
func (mmCreateUser *mGrpcAPIMockCreateUser) Times(n uint64) *mGrpcAPIMockCreateUser {
	if n == 0 {
		mmCreateUser.mock.t.Fatalf("Times of GrpcAPIMock.CreateUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateUser.expectedInvocations, n)
	return mmCreateUser
}

func (mmCreateUser *mGrpcAPIMockCreateUser) invocationsDone() bool {
	if len(mmCreateUser.expectations) == 0 && mmCreateUser.defaultExpectation == nil && mmCreateUser.mock.funcCreateUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateUser.mock.afterCreateUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateUser implements grpc_api.GrpcAPI
func (mmCreateUser *GrpcAPIMock) CreateUser(ctx context.Context, in *user_service.CreateUserRequest) (u1 uint64, err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, in)
	}

	mm_params := GrpcAPIMockCreateUserParams{ctx, in}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, &mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_want_ptrs := mmCreateUser.CreateUserMock.defaultExpectation.paramPtrs

		mm_got := GrpcAPIMockCreateUserParams{ctx, in}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateUser.t.Errorf("GrpcAPIMock.CreateUser got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmCreateUser.t.Errorf("GrpcAPIMock.CreateUser got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("GrpcAPIMock.CreateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the GrpcAPIMock.CreateUser")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, in)
	}
	mmCreateUser.t.Fatalf("Unexpected call to GrpcAPIMock.CreateUser. %v %v", ctx, in)
	return
}

// CreateUserAfterCounter returns a count of finished GrpcAPIMock.CreateUser invocations
func (mmCreateUser *GrpcAPIMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of GrpcAPIMock.CreateUser invocations
func (mmCreateUser *GrpcAPIMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to GrpcAPIMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mGrpcAPIMockCreateUser) Calls() []*GrpcAPIMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*GrpcAPIMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *GrpcAPIMock) MinimockCreateUserDone() bool {
	if m.CreateUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateUserMock.invocationsDone()
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *GrpcAPIMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcAPIMock.CreateUser with params: %#v", *e.params)
		}
	}

	afterCreateUserCounter := mm_atomic.LoadUint64(&m.afterCreateUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && afterCreateUserCounter < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcAPIMock.CreateUser")
		} else {
			m.t.Errorf("Expected call to GrpcAPIMock.CreateUser with params: %#v", *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && afterCreateUserCounter < 1 {
		m.t.Error("Expected call to GrpcAPIMock.CreateUser")
	}

	if !m.CreateUserMock.invocationsDone() && afterCreateUserCounter > 0 {
		m.t.Errorf("Expected %d calls to GrpcAPIMock.CreateUser but found %d calls",
			mm_atomic.LoadUint64(&m.CreateUserMock.expectedInvocations), afterCreateUserCounter)
	}
}

type mGrpcAPIMockDeleteChat struct {
	optional           bool
	mock               *GrpcAPIMock
	defaultExpectation *GrpcAPIMockDeleteChatExpectation
	expectations       []*GrpcAPIMockDeleteChatExpectation

	callArgs []*GrpcAPIMockDeleteChatParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// GrpcAPIMockDeleteChatExpectation specifies expectation struct of the GrpcAPI.DeleteChat
type GrpcAPIMockDeleteChatExpectation struct {
	mock      *GrpcAPIMock
	params    *GrpcAPIMockDeleteChatParams
	paramPtrs *GrpcAPIMockDeleteChatParamPtrs
	results   *GrpcAPIMockDeleteChatResults
	Counter   uint64
}

// GrpcAPIMockDeleteChatParams contains parameters of the GrpcAPI.DeleteChat
type GrpcAPIMockDeleteChatParams struct {
	ctx    context.Context
	chatID uint64
}

// GrpcAPIMockDeleteChatParamPtrs contains pointers to parameters of the GrpcAPI.DeleteChat
type GrpcAPIMockDeleteChatParamPtrs struct {
	ctx    *context.Context
	chatID *uint64
}

// GrpcAPIMockDeleteChatResults contains results of the GrpcAPI.DeleteChat
type GrpcAPIMockDeleteChatResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteChat *mGrpcAPIMockDeleteChat) Optional() *mGrpcAPIMockDeleteChat {
	mmDeleteChat.optional = true
	return mmDeleteChat
}

// Expect sets up expected params for GrpcAPI.DeleteChat
func (mmDeleteChat *mGrpcAPIMockDeleteChat) Expect(ctx context.Context, chatID uint64) *mGrpcAPIMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("GrpcAPIMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &GrpcAPIMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.paramPtrs != nil {
		mmDeleteChat.mock.t.Fatalf("GrpcAPIMock.DeleteChat mock is already set by ExpectParams functions")
	}

	mmDeleteChat.defaultExpectation.params = &GrpcAPIMockDeleteChatParams{ctx, chatID}
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// ExpectCtxParam1 sets up expected param ctx for GrpcAPI.DeleteChat
func (mmDeleteChat *mGrpcAPIMockDeleteChat) ExpectCtxParam1(ctx context.Context) *mGrpcAPIMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("GrpcAPIMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &GrpcAPIMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("GrpcAPIMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &GrpcAPIMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeleteChat
}

// ExpectChatIDParam2 sets up expected param chatID for GrpcAPI.DeleteChat
func (mmDeleteChat *mGrpcAPIMockDeleteChat) ExpectChatIDParam2(chatID uint64) *mGrpcAPIMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("GrpcAPIMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &GrpcAPIMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("GrpcAPIMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &GrpcAPIMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.chatID = &chatID

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the GrpcAPI.DeleteChat
func (mmDeleteChat *mGrpcAPIMockDeleteChat) Inspect(f func(ctx context.Context, chatID uint64)) *mGrpcAPIMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for GrpcAPIMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by GrpcAPI.DeleteChat
func (mmDeleteChat *mGrpcAPIMockDeleteChat) Return(err error) *GrpcAPIMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("GrpcAPIMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &GrpcAPIMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &GrpcAPIMockDeleteChatResults{err}
	return mmDeleteChat.mock
}

// Set uses given function f to mock the GrpcAPI.DeleteChat method
func (mmDeleteChat *mGrpcAPIMockDeleteChat) Set(f func(ctx context.Context, chatID uint64) (err error)) *GrpcAPIMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the GrpcAPI.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the GrpcAPI.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	return mmDeleteChat.mock
}

// When sets expectation for the GrpcAPI.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mGrpcAPIMockDeleteChat) When(ctx context.Context, chatID uint64) *GrpcAPIMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("GrpcAPIMock.DeleteChat mock is already set by Set")
	}

	expectation := &GrpcAPIMockDeleteChatExpectation{
		mock:   mmDeleteChat.mock,
		params: &GrpcAPIMockDeleteChatParams{ctx, chatID},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up GrpcAPI.DeleteChat return parameters for the expectation previously defined by the When method
func (e *GrpcAPIMockDeleteChatExpectation) Then(err error) *GrpcAPIMock {
	e.results = &GrpcAPIMockDeleteChatResults{err}
	return e.mock
}

// Times sets number of times GrpcAPI.DeleteChat should be invoked
func (mmDeleteChat *mGrpcAPIMockDeleteChat) Times(n uint64) *mGrpcAPIMockDeleteChat {
	if n == 0 {
		mmDeleteChat.mock.t.Fatalf("Times of GrpcAPIMock.DeleteChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteChat.expectedInvocations, n)
	return mmDeleteChat
}

func (mmDeleteChat *mGrpcAPIMockDeleteChat) invocationsDone() bool {
	if len(mmDeleteChat.expectations) == 0 && mmDeleteChat.defaultExpectation == nil && mmDeleteChat.mock.funcDeleteChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteChat.mock.afterDeleteChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteChat implements grpc_api.GrpcAPI
func (mmDeleteChat *GrpcAPIMock) DeleteChat(ctx context.Context, chatID uint64) (err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, chatID)
	}

	mm_params := GrpcAPIMockDeleteChatParams{ctx, chatID}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteChat.DeleteChatMock.defaultExpectation.paramPtrs

		mm_got := GrpcAPIMockDeleteChatParams{ctx, chatID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteChat.t.Errorf("GrpcAPIMock.DeleteChat got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmDeleteChat.t.Errorf("GrpcAPIMock.DeleteChat got unexpected parameter chatID, want: %#v, got: %#v%s\n", *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("GrpcAPIMock.DeleteChat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the GrpcAPIMock.DeleteChat")
		}
		return (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, chatID)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to GrpcAPIMock.DeleteChat. %v %v", ctx, chatID)
	return
}

// DeleteChatAfterCounter returns a count of finished GrpcAPIMock.DeleteChat invocations
func (mmDeleteChat *GrpcAPIMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of GrpcAPIMock.DeleteChat invocations
func (mmDeleteChat *GrpcAPIMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to GrpcAPIMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mGrpcAPIMockDeleteChat) Calls() []*GrpcAPIMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*GrpcAPIMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *GrpcAPIMock) MinimockDeleteChatDone() bool {
	if m.DeleteChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteChatMock.invocationsDone()
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *GrpcAPIMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcAPIMock.DeleteChat with params: %#v", *e.params)
		}
	}

	afterDeleteChatCounter := mm_atomic.LoadUint64(&m.afterDeleteChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && afterDeleteChatCounter < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcAPIMock.DeleteChat")
		} else {
			m.t.Errorf("Expected call to GrpcAPIMock.DeleteChat with params: %#v", *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && afterDeleteChatCounter < 1 {
		m.t.Error("Expected call to GrpcAPIMock.DeleteChat")
	}

	if !m.DeleteChatMock.invocationsDone() && afterDeleteChatCounter > 0 {
		m.t.Errorf("Expected %d calls to GrpcAPIMock.DeleteChat but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteChatMock.expectedInvocations), afterDeleteChatCounter)
	}
}

type mGrpcAPIMockDeleteUser struct {
	optional           bool
	mock               *GrpcAPIMock
	defaultExpectation *GrpcAPIMockDeleteUserExpectation
	expectations       []*GrpcAPIMockDeleteUserExpectation

	callArgs []*GrpcAPIMockDeleteUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// GrpcAPIMockDeleteUserExpectation specifies expectation struct of the GrpcAPI.DeleteUser
type GrpcAPIMockDeleteUserExpectation struct {
	mock      *GrpcAPIMock
	params    *GrpcAPIMockDeleteUserParams
	paramPtrs *GrpcAPIMockDeleteUserParamPtrs
	results   *GrpcAPIMockDeleteUserResults
	Counter   uint64
}

// GrpcAPIMockDeleteUserParams contains parameters of the GrpcAPI.DeleteUser
type GrpcAPIMockDeleteUserParams struct {
	ctx    context.Context
	userID uint64
}

// GrpcAPIMockDeleteUserParamPtrs contains pointers to parameters of the GrpcAPI.DeleteUser
type GrpcAPIMockDeleteUserParamPtrs struct {
	ctx    *context.Context
	userID *uint64
}

// GrpcAPIMockDeleteUserResults contains results of the GrpcAPI.DeleteUser
type GrpcAPIMockDeleteUserResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteUser *mGrpcAPIMockDeleteUser) Optional() *mGrpcAPIMockDeleteUser {
	mmDeleteUser.optional = true
	return mmDeleteUser
}

// Expect sets up expected params for GrpcAPI.DeleteUser
func (mmDeleteUser *mGrpcAPIMockDeleteUser) Expect(ctx context.Context, userID uint64) *mGrpcAPIMockDeleteUser {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcAPIMock.DeleteUser mock is already set by Set")
	}

	if mmDeleteUser.defaultExpectation == nil {
		mmDeleteUser.defaultExpectation = &GrpcAPIMockDeleteUserExpectation{}
	}

	if mmDeleteUser.defaultExpectation.paramPtrs != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcAPIMock.DeleteUser mock is already set by ExpectParams functions")
	}

	mmDeleteUser.defaultExpectation.params = &GrpcAPIMockDeleteUserParams{ctx, userID}
	for _, e := range mmDeleteUser.expectations {
		if minimock.Equal(e.params, mmDeleteUser.defaultExpectation.params) {
			mmDeleteUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteUser.defaultExpectation.params)
		}
	}

	return mmDeleteUser
}

// ExpectCtxParam1 sets up expected param ctx for GrpcAPI.DeleteUser
func (mmDeleteUser *mGrpcAPIMockDeleteUser) ExpectCtxParam1(ctx context.Context) *mGrpcAPIMockDeleteUser {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcAPIMock.DeleteUser mock is already set by Set")
	}

	if mmDeleteUser.defaultExpectation == nil {
		mmDeleteUser.defaultExpectation = &GrpcAPIMockDeleteUserExpectation{}
	}

	if mmDeleteUser.defaultExpectation.params != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcAPIMock.DeleteUser mock is already set by Expect")
	}

	if mmDeleteUser.defaultExpectation.paramPtrs == nil {
		mmDeleteUser.defaultExpectation.paramPtrs = &GrpcAPIMockDeleteUserParamPtrs{}
	}
	mmDeleteUser.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeleteUser
}

// ExpectUserIDParam2 sets up expected param userID for GrpcAPI.DeleteUser
func (mmDeleteUser *mGrpcAPIMockDeleteUser) ExpectUserIDParam2(userID uint64) *mGrpcAPIMockDeleteUser {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcAPIMock.DeleteUser mock is already set by Set")
	}

	if mmDeleteUser.defaultExpectation == nil {
		mmDeleteUser.defaultExpectation = &GrpcAPIMockDeleteUserExpectation{}
	}

	if mmDeleteUser.defaultExpectation.params != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcAPIMock.DeleteUser mock is already set by Expect")
	}

	if mmDeleteUser.defaultExpectation.paramPtrs == nil {
		mmDeleteUser.defaultExpectation.paramPtrs = &GrpcAPIMockDeleteUserParamPtrs{}
	}
	mmDeleteUser.defaultExpectation.paramPtrs.userID = &userID

	return mmDeleteUser
}

// Inspect accepts an inspector function that has same arguments as the GrpcAPI.DeleteUser
func (mmDeleteUser *mGrpcAPIMockDeleteUser) Inspect(f func(ctx context.Context, userID uint64)) *mGrpcAPIMockDeleteUser {
	if mmDeleteUser.mock.inspectFuncDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("Inspect function is already set for GrpcAPIMock.DeleteUser")
	}

	mmDeleteUser.mock.inspectFuncDeleteUser = f

	return mmDeleteUser
}

// Return sets up results that will be returned by GrpcAPI.DeleteUser
func (mmDeleteUser *mGrpcAPIMockDeleteUser) Return(err error) *GrpcAPIMock {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcAPIMock.DeleteUser mock is already set by Set")
	}

	if mmDeleteUser.defaultExpectation == nil {
		mmDeleteUser.defaultExpectation = &GrpcAPIMockDeleteUserExpectation{mock: mmDeleteUser.mock}
	}
	mmDeleteUser.defaultExpectation.results = &GrpcAPIMockDeleteUserResults{err}
	return mmDeleteUser.mock
}

// Set uses given function f to mock the GrpcAPI.DeleteUser method
func (mmDeleteUser *mGrpcAPIMockDeleteUser) Set(f func(ctx context.Context, userID uint64) (err error)) *GrpcAPIMock {
	if mmDeleteUser.defaultExpectation != nil {
		mmDeleteUser.mock.t.Fatalf("Default expectation is already set for the GrpcAPI.DeleteUser method")
	}

	if len(mmDeleteUser.expectations) > 0 {
		mmDeleteUser.mock.t.Fatalf("Some expectations are already set for the GrpcAPI.DeleteUser method")
	}

	mmDeleteUser.mock.funcDeleteUser = f
	return mmDeleteUser.mock
}

// When sets expectation for the GrpcAPI.DeleteUser which will trigger the result defined by the following
// Then helper
func (mmDeleteUser *mGrpcAPIMockDeleteUser) When(ctx context.Context, userID uint64) *GrpcAPIMockDeleteUserExpectation {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcAPIMock.DeleteUser mock is already set by Set")
	}

	expectation := &GrpcAPIMockDeleteUserExpectation{
		mock:   mmDeleteUser.mock,
		params: &GrpcAPIMockDeleteUserParams{ctx, userID},
	}
	mmDeleteUser.expectations = append(mmDeleteUser.expectations, expectation)
	return expectation
}

// Then sets up GrpcAPI.DeleteUser return parameters for the expectation previously defined by the When method
func (e *GrpcAPIMockDeleteUserExpectation) Then(err error) *GrpcAPIMock {
	e.results = &GrpcAPIMockDeleteUserResults{err}
	return e.mock
}

// Times sets number of times GrpcAPI.DeleteUser should be invoked
func (mmDeleteUser *mGrpcAPIMockDeleteUser) Times(n uint64) *mGrpcAPIMockDeleteUser {
	if n == 0 {
		mmDeleteUser.mock.t.Fatalf("Times of GrpcAPIMock.DeleteUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteUser.expectedInvocations, n)
	return mmDeleteUser
}

func (mmDeleteUser *mGrpcAPIMockDeleteUser) invocationsDone() bool {
	if len(mmDeleteUser.expectations) == 0 && mmDeleteUser.defaultExpectation == nil && mmDeleteUser.mock.funcDeleteUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteUser.mock.afterDeleteUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteUser implements grpc_api.GrpcAPI
func (mmDeleteUser *GrpcAPIMock) DeleteUser(ctx context.Context, userID uint64) (err error) {
	mm_atomic.AddUint64(&mmDeleteUser.beforeDeleteUserCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteUser.afterDeleteUserCounter, 1)

	if mmDeleteUser.inspectFuncDeleteUser != nil {
		mmDeleteUser.inspectFuncDeleteUser(ctx, userID)
	}

	mm_params := GrpcAPIMockDeleteUserParams{ctx, userID}

	// Record call args
	mmDeleteUser.DeleteUserMock.mutex.Lock()
	mmDeleteUser.DeleteUserMock.callArgs = append(mmDeleteUser.DeleteUserMock.callArgs, &mm_params)
	mmDeleteUser.DeleteUserMock.mutex.Unlock()

	for _, e := range mmDeleteUser.DeleteUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteUser.DeleteUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteUser.DeleteUserMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteUser.DeleteUserMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteUser.DeleteUserMock.defaultExpectation.paramPtrs

		mm_got := GrpcAPIMockDeleteUserParams{ctx, userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteUser.t.Errorf("GrpcAPIMock.DeleteUser got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmDeleteUser.t.Errorf("GrpcAPIMock.DeleteUser got unexpected parameter userID, want: %#v, got: %#v%s\n", *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteUser.t.Errorf("GrpcAPIMock.DeleteUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteUser.DeleteUserMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteUser.t.Fatal("No results are set for the GrpcAPIMock.DeleteUser")
		}
		return (*mm_results).err
	}
	if mmDeleteUser.funcDeleteUser != nil {
		return mmDeleteUser.funcDeleteUser(ctx, userID)
	}
	mmDeleteUser.t.Fatalf("Unexpected call to GrpcAPIMock.DeleteUser. %v %v", ctx, userID)
	return
}

// DeleteUserAfterCounter returns a count of finished GrpcAPIMock.DeleteUser invocations
func (mmDeleteUser *GrpcAPIMock) DeleteUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUser.afterDeleteUserCounter)
}

// DeleteUserBeforeCounter returns a count of GrpcAPIMock.DeleteUser invocations
func (mmDeleteUser *GrpcAPIMock) DeleteUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUser.beforeDeleteUserCounter)
}

// Calls returns a list of arguments used in each call to GrpcAPIMock.DeleteUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteUser *mGrpcAPIMockDeleteUser) Calls() []*GrpcAPIMockDeleteUserParams {
	mmDeleteUser.mutex.RLock()

	argCopy := make([]*GrpcAPIMockDeleteUserParams, len(mmDeleteUser.callArgs))
	copy(argCopy, mmDeleteUser.callArgs)

	mmDeleteUser.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteUserDone returns true if the count of the DeleteUser invocations corresponds
// the number of defined expectations
func (m *GrpcAPIMock) MinimockDeleteUserDone() bool {
	if m.DeleteUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteUserMock.invocationsDone()
}

// MinimockDeleteUserInspect logs each unmet expectation
func (m *GrpcAPIMock) MinimockDeleteUserInspect() {
	for _, e := range m.DeleteUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcAPIMock.DeleteUser with params: %#v", *e.params)
		}
	}

	afterDeleteUserCounter := mm_atomic.LoadUint64(&m.afterDeleteUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteUserMock.defaultExpectation != nil && afterDeleteUserCounter < 1 {
		if m.DeleteUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcAPIMock.DeleteUser")
		} else {
			m.t.Errorf("Expected call to GrpcAPIMock.DeleteUser with params: %#v", *m.DeleteUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteUser != nil && afterDeleteUserCounter < 1 {
		m.t.Error("Expected call to GrpcAPIMock.DeleteUser")
	}

	if !m.DeleteUserMock.invocationsDone() && afterDeleteUserCounter > 0 {
		m.t.Errorf("Expected %d calls to GrpcAPIMock.DeleteUser but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteUserMock.expectedInvocations), afterDeleteUserCounter)
	}
}

type mGrpcAPIMockSendMessage struct {
	optional           bool
	mock               *GrpcAPIMock
	defaultExpectation *GrpcAPIMockSendMessageExpectation
	expectations       []*GrpcAPIMockSendMessageExpectation

	callArgs []*GrpcAPIMockSendMessageParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// GrpcAPIMockSendMessageExpectation specifies expectation struct of the GrpcAPI.SendMessage
type GrpcAPIMockSendMessageExpectation struct {
	mock      *GrpcAPIMock
	params    *GrpcAPIMockSendMessageParams
	paramPtrs *GrpcAPIMockSendMessageParamPtrs
	results   *GrpcAPIMockSendMessageResults
	Counter   uint64
}

// GrpcAPIMockSendMessageParams contains parameters of the GrpcAPI.SendMessage
type GrpcAPIMockSendMessageParams struct {
	ctx context.Context
	in  *chat_service.SendMessageRequest
}

// GrpcAPIMockSendMessageParamPtrs contains pointers to parameters of the GrpcAPI.SendMessage
type GrpcAPIMockSendMessageParamPtrs struct {
	ctx *context.Context
	in  **chat_service.SendMessageRequest
}

// GrpcAPIMockSendMessageResults contains results of the GrpcAPI.SendMessage
type GrpcAPIMockSendMessageResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendMessage *mGrpcAPIMockSendMessage) Optional() *mGrpcAPIMockSendMessage {
	mmSendMessage.optional = true
	return mmSendMessage
}

// Expect sets up expected params for GrpcAPI.SendMessage
func (mmSendMessage *mGrpcAPIMockSendMessage) Expect(ctx context.Context, in *chat_service.SendMessageRequest) *mGrpcAPIMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("GrpcAPIMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &GrpcAPIMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.paramPtrs != nil {
		mmSendMessage.mock.t.Fatalf("GrpcAPIMock.SendMessage mock is already set by ExpectParams functions")
	}

	mmSendMessage.defaultExpectation.params = &GrpcAPIMockSendMessageParams{ctx, in}
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// ExpectCtxParam1 sets up expected param ctx for GrpcAPI.SendMessage
func (mmSendMessage *mGrpcAPIMockSendMessage) ExpectCtxParam1(ctx context.Context) *mGrpcAPIMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("GrpcAPIMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &GrpcAPIMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("GrpcAPIMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &GrpcAPIMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSendMessage
}

// ExpectInParam2 sets up expected param in for GrpcAPI.SendMessage
func (mmSendMessage *mGrpcAPIMockSendMessage) ExpectInParam2(in *chat_service.SendMessageRequest) *mGrpcAPIMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("GrpcAPIMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &GrpcAPIMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("GrpcAPIMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &GrpcAPIMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.in = &in

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the GrpcAPI.SendMessage
func (mmSendMessage *mGrpcAPIMockSendMessage) Inspect(f func(ctx context.Context, in *chat_service.SendMessageRequest)) *mGrpcAPIMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for GrpcAPIMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by GrpcAPI.SendMessage
func (mmSendMessage *mGrpcAPIMockSendMessage) Return(err error) *GrpcAPIMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("GrpcAPIMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &GrpcAPIMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &GrpcAPIMockSendMessageResults{err}
	return mmSendMessage.mock
}

// Set uses given function f to mock the GrpcAPI.SendMessage method
func (mmSendMessage *mGrpcAPIMockSendMessage) Set(f func(ctx context.Context, in *chat_service.SendMessageRequest) (err error)) *GrpcAPIMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the GrpcAPI.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the GrpcAPI.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	return mmSendMessage.mock
}

// When sets expectation for the GrpcAPI.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mGrpcAPIMockSendMessage) When(ctx context.Context, in *chat_service.SendMessageRequest) *GrpcAPIMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("GrpcAPIMock.SendMessage mock is already set by Set")
	}

	expectation := &GrpcAPIMockSendMessageExpectation{
		mock:   mmSendMessage.mock,
		params: &GrpcAPIMockSendMessageParams{ctx, in},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up GrpcAPI.SendMessage return parameters for the expectation previously defined by the When method
func (e *GrpcAPIMockSendMessageExpectation) Then(err error) *GrpcAPIMock {
	e.results = &GrpcAPIMockSendMessageResults{err}
	return e.mock
}

// Times sets number of times GrpcAPI.SendMessage should be invoked
func (mmSendMessage *mGrpcAPIMockSendMessage) Times(n uint64) *mGrpcAPIMockSendMessage {
	if n == 0 {
		mmSendMessage.mock.t.Fatalf("Times of GrpcAPIMock.SendMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendMessage.expectedInvocations, n)
	return mmSendMessage
}

func (mmSendMessage *mGrpcAPIMockSendMessage) invocationsDone() bool {
	if len(mmSendMessage.expectations) == 0 && mmSendMessage.defaultExpectation == nil && mmSendMessage.mock.funcSendMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendMessage.mock.afterSendMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendMessage implements grpc_api.GrpcAPI
func (mmSendMessage *GrpcAPIMock) SendMessage(ctx context.Context, in *chat_service.SendMessageRequest) (err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(ctx, in)
	}

	mm_params := GrpcAPIMockSendMessageParams{ctx, in}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, &mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_want_ptrs := mmSendMessage.SendMessageMock.defaultExpectation.paramPtrs

		mm_got := GrpcAPIMockSendMessageParams{ctx, in}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendMessage.t.Errorf("GrpcAPIMock.SendMessage got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmSendMessage.t.Errorf("GrpcAPIMock.SendMessage got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("GrpcAPIMock.SendMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the GrpcAPIMock.SendMessage")
		}
		return (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(ctx, in)
	}
	mmSendMessage.t.Fatalf("Unexpected call to GrpcAPIMock.SendMessage. %v %v", ctx, in)
	return
}

// SendMessageAfterCounter returns a count of finished GrpcAPIMock.SendMessage invocations
func (mmSendMessage *GrpcAPIMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of GrpcAPIMock.SendMessage invocations
func (mmSendMessage *GrpcAPIMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to GrpcAPIMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mGrpcAPIMockSendMessage) Calls() []*GrpcAPIMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*GrpcAPIMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *GrpcAPIMock) MinimockSendMessageDone() bool {
	if m.SendMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMessageMock.invocationsDone()
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *GrpcAPIMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcAPIMock.SendMessage with params: %#v", *e.params)
		}
	}

	afterSendMessageCounter := mm_atomic.LoadUint64(&m.afterSendMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && afterSendMessageCounter < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcAPIMock.SendMessage")
		} else {
			m.t.Errorf("Expected call to GrpcAPIMock.SendMessage with params: %#v", *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && afterSendMessageCounter < 1 {
		m.t.Error("Expected call to GrpcAPIMock.SendMessage")
	}

	if !m.SendMessageMock.invocationsDone() && afterSendMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to GrpcAPIMock.SendMessage but found %d calls",
			mm_atomic.LoadUint64(&m.SendMessageMock.expectedInvocations), afterSendMessageCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *GrpcAPIMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateChatInspect()

			m.MinimockCreateUserInspect()

			m.MinimockDeleteChatInspect()

			m.MinimockDeleteUserInspect()

			m.MinimockSendMessageInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *GrpcAPIMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *GrpcAPIMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateChatDone() &&
		m.MinimockCreateUserDone() &&
		m.MinimockDeleteChatDone() &&
		m.MinimockDeleteUserDone() &&
		m.MinimockSendMessageDone()
}
