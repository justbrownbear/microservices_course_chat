// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package transaction_manager_mock

//go:generate minimock -i github.com/justbrownbear/microservices_course_chat/internal/transaction_manager.TxManager -o tx_manager_minimock.go -n TxManagerMock -p transaction_manager_mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_transaction_manager "github.com/justbrownbear/microservices_course_chat/internal/transaction_manager"
)

// TxManagerMock implements mm_transaction_manager.TxManager
type TxManagerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcWithTransaction          func(ctx context.Context, handler mm_transaction_manager.Handler) (err error)
	funcWithTransactionOrigin    string
	inspectFuncWithTransaction   func(ctx context.Context, handler mm_transaction_manager.Handler)
	afterWithTransactionCounter  uint64
	beforeWithTransactionCounter uint64
	WithTransactionMock          mTxManagerMockWithTransaction
}

// NewTxManagerMock returns a mock for mm_transaction_manager.TxManager
func NewTxManagerMock(t minimock.Tester) *TxManagerMock {
	m := &TxManagerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.WithTransactionMock = mTxManagerMockWithTransaction{mock: m}
	m.WithTransactionMock.callArgs = []*TxManagerMockWithTransactionParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTxManagerMockWithTransaction struct {
	optional           bool
	mock               *TxManagerMock
	defaultExpectation *TxManagerMockWithTransactionExpectation
	expectations       []*TxManagerMockWithTransactionExpectation

	callArgs []*TxManagerMockWithTransactionParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TxManagerMockWithTransactionExpectation specifies expectation struct of the TxManager.WithTransaction
type TxManagerMockWithTransactionExpectation struct {
	mock               *TxManagerMock
	params             *TxManagerMockWithTransactionParams
	paramPtrs          *TxManagerMockWithTransactionParamPtrs
	expectationOrigins TxManagerMockWithTransactionExpectationOrigins
	results            *TxManagerMockWithTransactionResults
	returnOrigin       string
	Counter            uint64
}

// TxManagerMockWithTransactionParams contains parameters of the TxManager.WithTransaction
type TxManagerMockWithTransactionParams struct {
	ctx     context.Context
	handler mm_transaction_manager.Handler
}

// TxManagerMockWithTransactionParamPtrs contains pointers to parameters of the TxManager.WithTransaction
type TxManagerMockWithTransactionParamPtrs struct {
	ctx     *context.Context
	handler *mm_transaction_manager.Handler
}

// TxManagerMockWithTransactionResults contains results of the TxManager.WithTransaction
type TxManagerMockWithTransactionResults struct {
	err error
}

// TxManagerMockWithTransactionOrigins contains origins of expectations of the TxManager.WithTransaction
type TxManagerMockWithTransactionExpectationOrigins struct {
	origin        string
	originCtx     string
	originHandler string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWithTransaction *mTxManagerMockWithTransaction) Optional() *mTxManagerMockWithTransaction {
	mmWithTransaction.optional = true
	return mmWithTransaction
}

// Expect sets up expected params for TxManager.WithTransaction
func (mmWithTransaction *mTxManagerMockWithTransaction) Expect(ctx context.Context, handler mm_transaction_manager.Handler) *mTxManagerMockWithTransaction {
	if mmWithTransaction.mock.funcWithTransaction != nil {
		mmWithTransaction.mock.t.Fatalf("TxManagerMock.WithTransaction mock is already set by Set")
	}

	if mmWithTransaction.defaultExpectation == nil {
		mmWithTransaction.defaultExpectation = &TxManagerMockWithTransactionExpectation{}
	}

	if mmWithTransaction.defaultExpectation.paramPtrs != nil {
		mmWithTransaction.mock.t.Fatalf("TxManagerMock.WithTransaction mock is already set by ExpectParams functions")
	}

	mmWithTransaction.defaultExpectation.params = &TxManagerMockWithTransactionParams{ctx, handler}
	mmWithTransaction.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmWithTransaction.expectations {
		if minimock.Equal(e.params, mmWithTransaction.defaultExpectation.params) {
			mmWithTransaction.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWithTransaction.defaultExpectation.params)
		}
	}

	return mmWithTransaction
}

// ExpectCtxParam1 sets up expected param ctx for TxManager.WithTransaction
func (mmWithTransaction *mTxManagerMockWithTransaction) ExpectCtxParam1(ctx context.Context) *mTxManagerMockWithTransaction {
	if mmWithTransaction.mock.funcWithTransaction != nil {
		mmWithTransaction.mock.t.Fatalf("TxManagerMock.WithTransaction mock is already set by Set")
	}

	if mmWithTransaction.defaultExpectation == nil {
		mmWithTransaction.defaultExpectation = &TxManagerMockWithTransactionExpectation{}
	}

	if mmWithTransaction.defaultExpectation.params != nil {
		mmWithTransaction.mock.t.Fatalf("TxManagerMock.WithTransaction mock is already set by Expect")
	}

	if mmWithTransaction.defaultExpectation.paramPtrs == nil {
		mmWithTransaction.defaultExpectation.paramPtrs = &TxManagerMockWithTransactionParamPtrs{}
	}
	mmWithTransaction.defaultExpectation.paramPtrs.ctx = &ctx
	mmWithTransaction.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmWithTransaction
}

// ExpectHandlerParam2 sets up expected param handler for TxManager.WithTransaction
func (mmWithTransaction *mTxManagerMockWithTransaction) ExpectHandlerParam2(handler mm_transaction_manager.Handler) *mTxManagerMockWithTransaction {
	if mmWithTransaction.mock.funcWithTransaction != nil {
		mmWithTransaction.mock.t.Fatalf("TxManagerMock.WithTransaction mock is already set by Set")
	}

	if mmWithTransaction.defaultExpectation == nil {
		mmWithTransaction.defaultExpectation = &TxManagerMockWithTransactionExpectation{}
	}

	if mmWithTransaction.defaultExpectation.params != nil {
		mmWithTransaction.mock.t.Fatalf("TxManagerMock.WithTransaction mock is already set by Expect")
	}

	if mmWithTransaction.defaultExpectation.paramPtrs == nil {
		mmWithTransaction.defaultExpectation.paramPtrs = &TxManagerMockWithTransactionParamPtrs{}
	}
	mmWithTransaction.defaultExpectation.paramPtrs.handler = &handler
	mmWithTransaction.defaultExpectation.expectationOrigins.originHandler = minimock.CallerInfo(1)

	return mmWithTransaction
}

// Inspect accepts an inspector function that has same arguments as the TxManager.WithTransaction
func (mmWithTransaction *mTxManagerMockWithTransaction) Inspect(f func(ctx context.Context, handler mm_transaction_manager.Handler)) *mTxManagerMockWithTransaction {
	if mmWithTransaction.mock.inspectFuncWithTransaction != nil {
		mmWithTransaction.mock.t.Fatalf("Inspect function is already set for TxManagerMock.WithTransaction")
	}

	mmWithTransaction.mock.inspectFuncWithTransaction = f

	return mmWithTransaction
}

// Return sets up results that will be returned by TxManager.WithTransaction
func (mmWithTransaction *mTxManagerMockWithTransaction) Return(err error) *TxManagerMock {
	if mmWithTransaction.mock.funcWithTransaction != nil {
		mmWithTransaction.mock.t.Fatalf("TxManagerMock.WithTransaction mock is already set by Set")
	}

	if mmWithTransaction.defaultExpectation == nil {
		mmWithTransaction.defaultExpectation = &TxManagerMockWithTransactionExpectation{mock: mmWithTransaction.mock}
	}
	mmWithTransaction.defaultExpectation.results = &TxManagerMockWithTransactionResults{err}
	mmWithTransaction.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmWithTransaction.mock
}

// Set uses given function f to mock the TxManager.WithTransaction method
func (mmWithTransaction *mTxManagerMockWithTransaction) Set(f func(ctx context.Context, handler mm_transaction_manager.Handler) (err error)) *TxManagerMock {
	if mmWithTransaction.defaultExpectation != nil {
		mmWithTransaction.mock.t.Fatalf("Default expectation is already set for the TxManager.WithTransaction method")
	}

	if len(mmWithTransaction.expectations) > 0 {
		mmWithTransaction.mock.t.Fatalf("Some expectations are already set for the TxManager.WithTransaction method")
	}

	mmWithTransaction.mock.funcWithTransaction = f
	mmWithTransaction.mock.funcWithTransactionOrigin = minimock.CallerInfo(1)
	return mmWithTransaction.mock
}

// When sets expectation for the TxManager.WithTransaction which will trigger the result defined by the following
// Then helper
func (mmWithTransaction *mTxManagerMockWithTransaction) When(ctx context.Context, handler mm_transaction_manager.Handler) *TxManagerMockWithTransactionExpectation {
	if mmWithTransaction.mock.funcWithTransaction != nil {
		mmWithTransaction.mock.t.Fatalf("TxManagerMock.WithTransaction mock is already set by Set")
	}

	expectation := &TxManagerMockWithTransactionExpectation{
		mock:               mmWithTransaction.mock,
		params:             &TxManagerMockWithTransactionParams{ctx, handler},
		expectationOrigins: TxManagerMockWithTransactionExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmWithTransaction.expectations = append(mmWithTransaction.expectations, expectation)
	return expectation
}

// Then sets up TxManager.WithTransaction return parameters for the expectation previously defined by the When method
func (e *TxManagerMockWithTransactionExpectation) Then(err error) *TxManagerMock {
	e.results = &TxManagerMockWithTransactionResults{err}
	return e.mock
}

// Times sets number of times TxManager.WithTransaction should be invoked
func (mmWithTransaction *mTxManagerMockWithTransaction) Times(n uint64) *mTxManagerMockWithTransaction {
	if n == 0 {
		mmWithTransaction.mock.t.Fatalf("Times of TxManagerMock.WithTransaction mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWithTransaction.expectedInvocations, n)
	mmWithTransaction.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmWithTransaction
}

func (mmWithTransaction *mTxManagerMockWithTransaction) invocationsDone() bool {
	if len(mmWithTransaction.expectations) == 0 && mmWithTransaction.defaultExpectation == nil && mmWithTransaction.mock.funcWithTransaction == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWithTransaction.mock.afterWithTransactionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWithTransaction.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// WithTransaction implements mm_transaction_manager.TxManager
func (mmWithTransaction *TxManagerMock) WithTransaction(ctx context.Context, handler mm_transaction_manager.Handler) (err error) {
	mm_atomic.AddUint64(&mmWithTransaction.beforeWithTransactionCounter, 1)
	defer mm_atomic.AddUint64(&mmWithTransaction.afterWithTransactionCounter, 1)

	mmWithTransaction.t.Helper()

	if mmWithTransaction.inspectFuncWithTransaction != nil {
		mmWithTransaction.inspectFuncWithTransaction(ctx, handler)
	}

	mm_params := TxManagerMockWithTransactionParams{ctx, handler}

	// Record call args
	mmWithTransaction.WithTransactionMock.mutex.Lock()
	mmWithTransaction.WithTransactionMock.callArgs = append(mmWithTransaction.WithTransactionMock.callArgs, &mm_params)
	mmWithTransaction.WithTransactionMock.mutex.Unlock()

	for _, e := range mmWithTransaction.WithTransactionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmWithTransaction.WithTransactionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWithTransaction.WithTransactionMock.defaultExpectation.Counter, 1)
		mm_want := mmWithTransaction.WithTransactionMock.defaultExpectation.params
		mm_want_ptrs := mmWithTransaction.WithTransactionMock.defaultExpectation.paramPtrs

		mm_got := TxManagerMockWithTransactionParams{ctx, handler}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmWithTransaction.t.Errorf("TxManagerMock.WithTransaction got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWithTransaction.WithTransactionMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.handler != nil && !minimock.Equal(*mm_want_ptrs.handler, mm_got.handler) {
				mmWithTransaction.t.Errorf("TxManagerMock.WithTransaction got unexpected parameter handler, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWithTransaction.WithTransactionMock.defaultExpectation.expectationOrigins.originHandler, *mm_want_ptrs.handler, mm_got.handler, minimock.Diff(*mm_want_ptrs.handler, mm_got.handler))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWithTransaction.t.Errorf("TxManagerMock.WithTransaction got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmWithTransaction.WithTransactionMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWithTransaction.WithTransactionMock.defaultExpectation.results
		if mm_results == nil {
			mmWithTransaction.t.Fatal("No results are set for the TxManagerMock.WithTransaction")
		}
		return (*mm_results).err
	}
	if mmWithTransaction.funcWithTransaction != nil {
		return mmWithTransaction.funcWithTransaction(ctx, handler)
	}
	mmWithTransaction.t.Fatalf("Unexpected call to TxManagerMock.WithTransaction. %v %v", ctx, handler)
	return
}

// WithTransactionAfterCounter returns a count of finished TxManagerMock.WithTransaction invocations
func (mmWithTransaction *TxManagerMock) WithTransactionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWithTransaction.afterWithTransactionCounter)
}

// WithTransactionBeforeCounter returns a count of TxManagerMock.WithTransaction invocations
func (mmWithTransaction *TxManagerMock) WithTransactionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWithTransaction.beforeWithTransactionCounter)
}

// Calls returns a list of arguments used in each call to TxManagerMock.WithTransaction.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWithTransaction *mTxManagerMockWithTransaction) Calls() []*TxManagerMockWithTransactionParams {
	mmWithTransaction.mutex.RLock()

	argCopy := make([]*TxManagerMockWithTransactionParams, len(mmWithTransaction.callArgs))
	copy(argCopy, mmWithTransaction.callArgs)

	mmWithTransaction.mutex.RUnlock()

	return argCopy
}

// MinimockWithTransactionDone returns true if the count of the WithTransaction invocations corresponds
// the number of defined expectations
func (m *TxManagerMock) MinimockWithTransactionDone() bool {
	if m.WithTransactionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WithTransactionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WithTransactionMock.invocationsDone()
}

// MinimockWithTransactionInspect logs each unmet expectation
func (m *TxManagerMock) MinimockWithTransactionInspect() {
	for _, e := range m.WithTransactionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TxManagerMock.WithTransaction at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterWithTransactionCounter := mm_atomic.LoadUint64(&m.afterWithTransactionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WithTransactionMock.defaultExpectation != nil && afterWithTransactionCounter < 1 {
		if m.WithTransactionMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TxManagerMock.WithTransaction at\n%s", m.WithTransactionMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TxManagerMock.WithTransaction at\n%s with params: %#v", m.WithTransactionMock.defaultExpectation.expectationOrigins.origin, *m.WithTransactionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWithTransaction != nil && afterWithTransactionCounter < 1 {
		m.t.Errorf("Expected call to TxManagerMock.WithTransaction at\n%s", m.funcWithTransactionOrigin)
	}

	if !m.WithTransactionMock.invocationsDone() && afterWithTransactionCounter > 0 {
		m.t.Errorf("Expected %d calls to TxManagerMock.WithTransaction at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.WithTransactionMock.expectedInvocations), m.WithTransactionMock.expectedInvocationsOrigin, afterWithTransactionCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TxManagerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockWithTransactionInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TxManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TxManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockWithTransactionDone()
}
